import { NextResponse } from 'next/server';
import { textToSpeech } from '@/services/text-to-speech';
import { speechToText } from '@/services/speech-to-text';
import { getAICompletion } from '@/services/interview-agent';
import { addAgentResponse, addUserResponse, START_PROMPT, stripAgentTag } from '@/common/services/prompt-builder';

export async function POST(request: Request) {
  try {
    const { data, context, isStart }: { data: string; context: string; isStart: boolean } = await request.json();

    console.log('Incoming data:', { data, context, isStart });

    // Ensure the base64 data is valid before decoding
    const base64Data = data.split(',')[1];
    if (!base64Data) {
      return NextResponse.json({ error: 'Invalid base64 data' }, { status: 400 });
    }

    // Convert base64 to audio buffer
    const audio = Buffer.from(base64Data, 'base64');

    // Perform speech-to-text conversion
    const transcription = await speechToText(audio);

    // Prepare the prompt based on whether it's the start of a conversation
    const prompt = isStart ? addUserResponse(START_PROMPT, transcription) : addUserResponse(context, transcription);

    // Get AI response
    let response = await getAICompletion(prompt);
    if (response) {
      // Strip any agent tags from the response
      response = stripAgentTag(response);

      // Convert AI response text to audio
      const audioBuffer = await textToSpeech(response);

      // Return the audio response and updated context
      return NextResponse.json(
        {
          data: audioBuffer.toString('base64'),
          context: addAgentResponse(context, response),
        },
        { status: 200 }
      );
    }

    // Handle case where no response is generated by AI
    return NextResponse.json({ error: 'No response from AI' }, { status: 400 });
  } catch (error) {
    console.error('Error in POST handler:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}
